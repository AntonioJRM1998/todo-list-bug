{
	"info": {
		"_postman_id": "a76165fe-c2e1-427d-b3ad-6a8eb68b430d",
		"name": "Prueba tecnica",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18502636"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains the required field - access_token\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('access_token').that.is.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Access token is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.access_token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema against the expected structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('access_token');\r",
							"    pm.expect(responseData.access_token).to.be.a('string');\r",
							"});\r",
							"var responseData = pm.response.json();\r",
							"\r",
							"// Combine tests for response structure and specific properties\r",
							"pm.test(\"Response structure and access_token validation\", function () {\r",
							"    pm.expect(responseData).to.be.an('object').that.has.property('access_token').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"test2@gmail.com\",\r\n    \"pass\": \"Abdce1@hjjh\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains required fields: message and user\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('message', 'user');\r",
							"    pm.expect(responseData.user).to.be.an('object').that.has.all.keys('email', 'pass', 'fullname', 'id');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User object schema is valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('message').that.is.a('string');\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('user').that.is.an('object');\r",
							"    pm.expect(responseData.user).to.have.all.keys('email', 'pass', 'fullname', 'id');\r",
							"    \r",
							"    pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
							"    pm.expect(responseData.user.pass).to.be.a('string');\r",
							"    pm.expect(responseData.user.fullname).to.be.a('string');\r",
							"    pm.expect(responseData.user.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email must be in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.user).to.be.an('object');\r",
							"    pm.expect(responseData.user.email).to.exist;\r",
							"    pm.expect(responseData.user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test2@gmail.com\",\r\n    \"pass\": \"Abdce1@hjjh\",\r\n    \"fullname\": \"Test 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('title', 'description', 'dueDate', 'done', 'owner', 'id');\r",
							"    \r",
							"    pm.expect(responseData.owner).to.be.an('object').that.has.property('id').that.is.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Owner ID must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.owner).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.owner.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Owner ID should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('title', 'description', 'dueDate', 'done', 'owner', 'id');\r",
							"    \r",
							"    pm.expect(responseData.title).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.description).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.dueDate).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.done).to.exist.and.to.be.a('boolean');\r",
							"    \r",
							"    pm.expect(responseData.owner).to.be.an('object').that.has.all.keys('id');\r",
							"    pm.expect(responseData.owner.id).to.exist.and.to.be.a('string');\r",
							"    \r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImUxOWM3OTE3LTZhMTctNGVkYS1hMjJlLTg5MjUxMGNkNzVkMSIsImVtYWlsIjoidGVzdDJAZ21haWwuY29tIiwiaWF0IjoxNzUyNTMzOTMyLCJleHAiOjE3NTI1Mzc1MzJ9.JRdL04osLapdlQPcx2qpCgkbjiLT06UhEXYS4-TSJJY",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"title\": \"Test crear Task\",\r\n   \"description\": \"Test crear Task\",\r\n   \"dueDate\": \"01/01/2025\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/tasks/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains a message field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object').that.has.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\" : \"Test Update 5\",\r\n    \"description\" : \"Estoy actualizando los datos\",\r\n    \"id\" : \"08ef6a06-4acf-46c5-933c-3d2ad7d8e028\"    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/tasks/edit",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks",
						"edit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all tasks",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get task by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('message', 'error', 'statusCode');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"StatusCode is a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.statusCode).to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message and error should be non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImUxOWM3OTE3LTZhMTctNGVkYS1hMjJlLTg5MjUxMGNkNzVkMSIsImVtYWlsIjoidGVzdDJAZ21haWwuY29tIiwiaWF0IjoxNzUyNTMzOTMyLCJleHAiOjE3NTI1Mzc1MzJ9.JRdL04osLapdlQPcx2qpCgkbjiLT06UhEXYS4-TSJJY",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/tasks/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "e19c7917-6a17-4eda-a22e-892510cd75d1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required message field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImUxOWM3OTE3LTZhMTctNGVkYS1hMjJlLTg5MjUxMGNkNzVkMSIsImVtYWlsIjoidGVzdDJAZ21haWwuY29tIiwiaWF0IjoxNzUyNTM0ODM0LCJleHAiOjE3NTI1Mzg0MzR9.J6bw9hj_Kiwq1sx67A-1YUBGf7GEfDOVrbyJSclHGsA",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/tasks/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "90b6597d-51f8-4f36-8e63-bf47bb391fe3"
						}
					]
				}
			},
			"response": []
		}
	]
}